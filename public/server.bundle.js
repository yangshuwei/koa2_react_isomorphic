!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=5)}([function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-router")},function(e,t){e.exports=require("react-redux")},function(e,t){e.exports=require("redux")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),u=function(e){return e&&e.__esModule?e:{default:e}}(o);var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),n(t,[{key:"render",value:function(){this.props.listData;return u.default.createElement("div",null,"111")}}]),t}();t.default=i},function(e,t,r){"use strict";var n=u(r(6)),o=u(r(7));function u(e){return e&&e.__esModule?e:{default:e}}var i=new n.default;i.env="production",(0,o.default)(i),i.listen(38080,function(){console.log("服务器启动。。。。。")})},function(e,t){e.exports=require("koa")},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n=a(r(8)),o=a(r(9)),u=a(r(10)),i=(a(r(11)),a(r(12)));function a(e){return e&&e.__esModule?e:{default:e}}var c=n.default.join(e,"./view"),l=n.default.join(e,"../../public");console.log(l),t.default=function(e){e.use((0,u.default)(l)),e.use((0,o.default)(c,{extension:"ejs"})),e.use(i.default),e.use(async function(e){e.status=404,await e.render("404")})}}).call(this,"app\\servers")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("koa-views")},function(e,t){e.exports=require("koa-static")},function(e,t){e.exports=require("koa-convert")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){return e&&e.__esModule?e:{default:e}}(r(13));t.default=async function(e,t){await(0,n.default)(e,t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),o=i(r(14)),u=i(r(19));function i(e){return e&&e.__esModule?e:{default:e}}t.default=async function(e,t){try{var r=await function(e){return new Promise(function(t,r){(0,n.match)(e,function(e,n,o){if(e)return r(e);t({redirectLocation:n,renderProps:o})})})}({routes:u.default,location:e.url}),i=r.redirectLocation,a=r.renderProps;i?e.redirect(i.pathname+i.search):a?(console.log(e.url),await(0,o.default)(e,t,a)):await t()}catch(t){console.error("Server-Render Error Occurs: %s",t.stack),await e.render("500",{msg:"development"===e.app.env&&t.message})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=a(r(0)),o=r(1),u=r(15),i=r(2);function a(e){return e&&e.__esModule?e:{default:e}}var c=(0,a(r(16)).default)();t.default=async function(e,t,r){console.log(r);r.routes[r.routes.length-1];var a=[],l=!0,f=!1,s=void 0;try{for(var p,d=r.components[Symbol.iterator]();!(l=(p=d.next()).done);l=!0){var y=p.value;if(y&&y.WrappedComponent&&y.WrappedComponent.fetch){var _=y.WrappedComponent.fetch(c.getState(),c.dispatch);Array.isArray(_)?a=a.concat(_):_.then&&a.push(_)}}}catch(e){f=!0,s=e}finally{try{!l&&d.return&&d.return()}finally{if(f)throw s}}await Promise.all(a),await e.render("index",{title:"测试",dev:"development"===e.app.env,reduxData:JSON.stringify(c.getState()),app:(0,u.renderToString)(n.default.createElement(i.Provider,{store:c},n.default.createElement(o.RouterContext,r)))})}},function(e,t){e.exports=require("react-dom/server")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return a(u.default,e)};var n=r(3),o=i(r(17)),u=i(r(18));function i(e){return e&&e.__esModule?e:{default:e}}var a=(0,n.applyMiddleware)(o.default)(n.createStore)},function(e,t){e.exports=require("redux-thunk")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3);t.default=(0,n.combineReducers)({list:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case"DAILY_LIST_SUCCESS":return{state:e,listData:t.listData};default:return e}}})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=a(r(20)),o=a(r(4)),u=r(1),i=a(r(0));function a(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.createElement(u.Router,{history:u.browserHistory},i.default.createElement(u.Route,{path:"/",component:n.default}),i.default.createElement(u.Route,{path:"/dailyNew",component:o.default}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),u=l(o),i=r(1),a=r(2),c=l(r(21));r(22),l(r(4));function l(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),n(t,[{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement(c.default,null),u.default.createElement("li",null,u.default.createElement(i.Link,{to:"/dailyNew"},"dailyNew")))}}]),t}();t.default=(0,a.connect)()(f)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),u=function(e){return e&&e.__esModule?e:{default:e}}(o);var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),n(t,[{key:"render",value:function(){return u.default.createElement("header",null,u.default.createElement("h2",null,"React同构应用"))}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fetchDailyList=void 0,t.dailyListRequest=o,t.dailyListSuccess=u,t.dailyListFailed=i;var n=function(e){return e&&e.__esModule?e:{default:e}}(r(23));t.fetchDailyList=function(e){return function(e){return e({type:"DAILY_LIST"}),(0,n.default)("https://m.ehaier.com/sg/cms/revision/getCategory.json?type=6").then(function(e){return e.json()}).then(function(t){return e(u(t))}).catch(function(t){return e(i(t))})}};function o(){return{type:"DAILY_LIST"}}function u(e){return{type:"DAILY_LIST_SUCCESS",listData:e}}function i(e){return{type:"DAILY_LIST_FAILED",error:e}}},function(e,t){e.exports=require("isomorphic-fetch")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,